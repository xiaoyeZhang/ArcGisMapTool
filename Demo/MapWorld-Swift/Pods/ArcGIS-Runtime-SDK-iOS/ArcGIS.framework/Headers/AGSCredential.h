/*
 COPYRIGHT 2010 ESRI
 
 TRADE SECRETS: ESRI PROPRIETARY AND CONFIDENTIAL
 Unpublished material - all rights reserved under the
 Copyright Laws of the United States and applicable international
 laws, treaties, and conventions.
 
 For additional information, contact:
 Environmental Systems Research Institute, Inc.
 Attn: Contracts and Legal Services Department
 380 New York Street
 Redlands, California, 92373
 USA
 
 email: contracts@esri.com
 */

/** @file AGSCredential.h */ //Required for Globals API doc

@class AGSAuthenticationChallenge;

/** @brief Represents an credential to access a secured resource.
 
 Instances of this class represent a credential object to access a secured ArcGIS resource. The
 resource could be secured using ArcGIS tokens or HTTP (basic or digest) authentication.
 
 @define{AGSCredential.h, ArcGIS}
 @since 100
 */
@interface AGSCredential : NSObject <NSCopying, NSCoding>
NS_ASSUME_NONNULL_BEGIN

#pragma mark -
#pragma mark properties

/** Username used to access secured resource or retrieve a token.
 @since 100
 */
@property (nullable, nonatomic, copy) NSString *username;

/** Password used to access secured resource or retrieve a token.
 @since 100
 */
@property (nullable, nonatomic, copy) NSString *password;

/** Url to the token service.
 @since 100
 */
@property (nullable, nonatomic, strong) NSURL *tokenUrl;

/** A string representing the referer for which the long-lived token was generated.
 @since 100
 */
@property (nullable, nonatomic, copy, readonly) NSString *referer;


/** Generated by the server from a username/password combination.
 @since 100
 */
@property (nullable, nonatomic, copy) NSString *token;

/** The identity associated with this credential.
 @since 100
 */
@property (nullable, nonatomic, assign) SecIdentityRef identity;

/** Specifies whehter credential can be added to the credential cache. Default is YES.
 @since 100
 */
@property (nonatomic, assign, readwrite, getter=isCachingEnabled) BOOL cachingEnabled;

#pragma mark -
#pragma mark initializers

/** Initialize an <code>%AGSCredential</code> object.
 @param username The username of user attempting to access secured resource.
 @param password The password of user attempting to access secured resource.
 @return A new, initialized <code>%AGSCredential</code>.
 @since 100
 */
- (instancetype)initWithUser:(NSString*)username password:(NSString*)password;

/** Initialize an AGSCredential object with an @c SecIdentityRef.
 @param identityRef The identity in which to initialize the credential object.
 @return A new, initialized <code>%AGSCredential</code>.
 @since 100
 */
- (instancetype)initWithIdentityRef:(SecIdentityRef)identityRef;

/** Initialize an AGSCredential object with a long-lived token and referer. This token will be used to access the secured resource.
 @param token The long-lived token to initialize the credential object.
 @param referer The referer to be sent along with token in the request.
 @return A new, initialized <code>%AGSCredential</code>.
 @since 100
 */
- (instancetype)initWithToken:(NSString*)token referer:(nullable NSString*)referer;

/** Initialize an <code>%AGSCredential</code> object.
 @param username The username of user attempting to access secured resource.
 @param password The password of user attempting to access secured resource.
 @return A new, initialized <code>%AGSCredential</code>.
 @since 100
 */
+ (instancetype)credentialWithUser:(NSString*)username password:(NSString*)password;

#pragma mark -
#pragma mark methods

/** Returns an array of @c SecIdentityRef objects that can be used to authenticate against
 the specified @c NSURLProtectionSpace. Pass nil for the @p protectionSpace to return all identities
 available to the application.
 @param protectionSpace The protection space in which to retrieve identities for.
 @return An array of @c SecIdentityRef objects that can be used for client certificate authentication.
 @since 100
 */
+ (nullable NSArray<id>*)identitiesForProtectionSpace:(nullable NSURLProtectionSpace*)protectionSpace;

/** Imports the certificate data into the keychain for the running application. This certificate can be
 retrieved from any application that shares the same keychain access group.
 @param data The data representing the client certificate.
 @param password The password to be used to access the certificate.
 @param overwrite If <code>YES</code>, this method will delete an existing certificate that matches and then
 re-add the certificate represented by data.
 @param error Returned if an error is encountered while importing the data.
 @return An @c SecIdentityRef object representing the imported data.
 @since 100
 */
+ (nullable SecIdentityRef)importCertificateData:(NSData*)data password:(NSString*)password overwrite:(BOOL)overwrite error:(NSError**)error;

/** Removes an identity and its certificates from the keychain.
 @param identityRef The identity to remove from the keychain.
 @return An @c OSStatus result code indicating success or failure. See SecBase.h for for possible values.
 @since 100
 */
+ (OSStatus)removeIdentityFromKeychain:(SecIdentityRef)identityRef;

/** Returns the host (including port number) that a username/password will be sent to for authentication.
 This is useful to display to a user when prompting them for credentials when a resource fails to load.
 @since 100
 */
- (nullable NSString*)authenticatingHost;

NS_ASSUME_NONNULL_END
@end

